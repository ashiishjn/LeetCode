
/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/
class Solution {
    HashMap<Node, Node> visited = new HashMap<>();
    public Node cloneGraph(Node node) 
    {
        if(node == null) 
            return null;
        if(visited.containsKey(node)) 
            return visited.get(node);
        Node res = new Node(node.val);
        ArrayList cloneNeighbors = new ArrayList<>();
        res.neighbors = cloneNeighbors;

        visited.put(node, res);
        for(Node nei:node.neighbors)
        {
            Node cloneNode = cloneGraph(nei);
            cloneNeighbors.add(cloneNode);
        }
        return res;
    }
}
