class Solution 
{
    public int[][] insert(int[][] intervals, int[] newInterval) 
    {
        int f=0,i;
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        List<Integer> l =new ArrayList<Integer>();
        for(i=0;i<intervals.length;i++)
        {
            if(f==0)
            {
                if(newInterval[0]<intervals[i][0])
                {
                    f=1;
                    l.add(newInterval[0]);
                    if(newInterval[1]<intervals[i][0])
                    {
                        f=2;
                        l.add(newInterval[1]);
                        l.add(intervals[i][0]);
                        l.add(intervals[i][1]);
                    }
                    else if(newInterval[1]<intervals[i][1])
                    {
                        f=2;
                        l.add(intervals[i][1]);
                    }
                }
                else if(newInterval[0]<=intervals[i][1])
                {
                    l.add(intervals[i][0]);
                    f=1;
                    if(newInterval[1]<=intervals[i][1])
                    {
                        f=2;
                        l.add(intervals[i][1]);
                    }
                }
                else
                {
                    l.add(intervals[i][0]);
                    l.add(intervals[i][1]);
                }
            }
            else if(f==1)
            {
                if(newInterval[1]<intervals[i][0])
                {
                    f=2;
                    l.add(newInterval[1]);
                    l.add(intervals[i][0]);
                    l.add(intervals[i][1]);
                }
                else if(newInterval[1]<=intervals[i][1])
                {
                    f=2;
                    l.add(intervals[i][1]);
                }
            }
            else
            {
                l.add(intervals[i][0]);
                l.add(intervals[i][1]);
            }
        }
        if(f==0)
        {
            l.add(newInterval[0]);
            l.add(newInterval[1]);
        }
        else if(f==1)
            l.add(newInterval[1]);
        int[][] c = new int[l.size()/2][2];
        for(i=0;i<l.size()/2;i++)
        {
            c[i][0]=l.get(2*i);
            c[i][1]=l.get(2*i+1);
        }
        return c;
    }
}
