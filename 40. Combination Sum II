class Solution {
    public int backtrack(List<List<Integer>> l, List<Integer> t, int[] candidates, int target, int i )
    {
        if(target == 0)
        {
            if(!l.contains(t))
                l.add(new ArrayList<>(t));
            return 1;
        }
        else if(target < 0)
            return 1;
        int x;
        for(; i<candidates.length;)
        {
            System.out.println(i+" "+target+" ");
            t.add(candidates[i]);
            int a=backtrack(l, t, candidates, target-candidates[i], i+1);
            t.remove(t.size()-1);
            if(a ==1 )
                return 0;
            x=i+1;
            while(x<candidates.length && candidates[i]==candidates[x])
                x++;
            i=x;
        }
        return 0;
    }
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> list = new ArrayList<>();
        Arrays.sort(candidates);
        backtrack(list, new ArrayList<>(), candidates, target, 0);
        return list;
    }
}
