class Solution 
{
    public int uniquepaths(int[][] obstacleGrid, int[][] dp, int m, int n)
    {
        if(m==0 && n==0 && obstacleGrid[m][n]==0)
            return 1;
        else if(obstacleGrid[m][n]==1)
            return 0;
        else if(dp[m][n] != 0)
            return dp[m][n];
        else if(m==0)
            return dp[m][n] =  uniquepaths(obstacleGrid,dp,m,n-1);
        else if(n==0)
            return dp[m][n] = uniquepaths(obstacleGrid,dp,m-1,n);
        return dp[m][n] = uniquepaths(obstacleGrid,dp,m-1,n) + uniquepaths(obstacleGrid,dp,m,n-1);
    }
    public int uniquePathsWithObstacles(int[][] obstacleGrid) 
    {
        int m,n;
        m=obstacleGrid.length;
        n=obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        return uniquepaths(obstacleGrid,dp,m-1,n-1);
    }
}
